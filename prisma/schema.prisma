// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProductStatus {
  IN_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum Rating {
  ONE_STAR
  TWO_STAR
}

model User {
  id        Int       @id @unique @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  role      UserRole  @default(USER)
  phone     String?
  address   String?
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  wishlist  Wishlist?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  stock        Int
  status       ProductStatus  @default(IN_STOCK)
  categoryId   Int
  category     Category       @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  reviews      Review[]
  orderItems   OrderItem[]
  Inventory    Inventory[]
  CartItem     CartItem[]
  WishlistItem WishlistItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  totalPrice Float
  status     OrderStatus
  payment    Payment?
  shippingId Int
  shipping   Shipping    @relation(fields: [shippingId], references: [id])
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Shipping {
  id          Int       @id @default(autoincrement())
  address     String
  city        String
  postalCode  String
  country     String
  phoneNumber String
  order       Order[]
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  amount        Float
  method        PaymentMethod
  status        PaymentStatus
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  order         Order         @relation(fields: [orderId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Rating
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Inventory {
  id        Int     @id @default(autoincrement())
  productId Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Wishlist {
  id            Int            @id @default(autoincrement())
  userId        Int            @unique
  user          User           @relation(fields: [userId], references: [id])
  wishlistItems WishlistItem[]
  createdAt     DateTime       @default(now())
  deletedAt     DateTime?
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Promotion {
  id           Int          @id @default(autoincrement())
  code         String       @unique
  discount     Float
  discountType DiscountType
  description  String
  validFrom    DateTime
  validUntil   DateTime
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
}

model Coupon {
  id         Int       @id @default(autoincrement())
  code       String    @unique
  discount   Float
  validFrom  DateTime
  validUntil DateTime
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model TaxRate {
  id        Int      @id @default(autoincrement())
  country   String
  state     String?
  rate      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
